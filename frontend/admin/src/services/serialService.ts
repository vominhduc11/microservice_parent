import { apiRequest } from "./api";
import {
  SerialCreateRequest,
  ProductSerial,
  ApiResponse,
  SerialAssignmentRequest,
  SerialAssignmentResponse,
  AvailableSerialItem
} from "@/types";

export const serialService = {
  // T·∫°o serial m·ªõi cho s·∫£n ph·∫©m
  async createSerial(serialData: SerialCreateRequest): Promise<ProductSerial> {
    const response = await apiRequest<ApiResponse<ProductSerial>>('/api/product/product-serials/serial', {
      method: 'POST',
      body: JSON.stringify(serialData),
    });
    
    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to create serial');
  },

  // L·∫•y danh s√°ch serial theo product ID
  async getSerialsByProduct(productId: string | number): Promise<ProductSerial[]> {
    const response = await apiRequest<ApiResponse<ProductSerial[]>>(`/api/product/product-serials/${productId}/serials`);
    
    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to fetch serials');
  },

  // X√≥a serial
  async deleteSerial(serialId: number): Promise<void> {
    const response = await apiRequest<ApiResponse<any>>(`/api/product/product-serials/serial/${serialId}`, {
      method: 'DELETE',
    });

    if (!response.success) {
      throw new Error(response.message || 'Failed to delete serial');
    }
  },

  // X√≥a nhi·ªÅu serials c√πng l√∫c (Requires ADMIN role)
  async deleteBulkSerials(serialIds: number[]): Promise<void> {
    const response = await apiRequest<ApiResponse<any>>('/api/product/product-serials/serials', {
      method: 'DELETE',
      body: JSON.stringify(serialIds),
    });

    if (!response.success) {
      throw new Error(response.message || 'Failed to delete serials');
    }
  },


  // L·∫•y t·∫•t c·∫£ serials (cho admin)
  async getAllSerials(): Promise<ProductSerial[]> {
    const response = await apiRequest<ApiResponse<ProductSerial[]>>('/api/product/serials');
    
    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to fetch all serials');
  },

  // Ki·ªÉm tra serial c√≥ t·ªìn t·∫°i kh√¥ng
  async checkSerialExists(serial: string): Promise<boolean> {
    try {
      const response = await apiRequest<ApiResponse<{exists: boolean}>>(`/api/product/serials/check/${serial}`);
      return response.success && response.data.exists;
    } catch (error) {
      return false;
    }
  },

  // T·∫°o nhi·ªÅu serials c√πng l√∫c
  async createBulkSerials(productId: number, serials: string[]): Promise<ProductSerial[]> {
    const serialPromises = serials.map(serial => 
      this.createSerial({ serial, productId })
    );
    
    try {
      return await Promise.all(serialPromises);
    } catch (error) {
      throw new Error('Some serials failed to create. Please check for duplicates.');
    }
  },

  // Generate serial numbers t·ª± ƒë·ªông
  generateSerialNumbers(count: number, prefix: string = 'SN'): string[] {
    const serials: string[] = [];
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

    for (let i = 0; i < count; i++) {
      let serial = prefix;
      for (let j = 0; j < 6; j++) {
        serial += chars.charAt(Math.floor(Math.random() * chars.length));
      }

      // Ensure uniqueness in batch
      if (serials.includes(serial)) {
        i--; // Retry this iteration
        continue;
      }

      serials.push(serial);
    }

    return serials;
  },

  // SERIAL ASSIGNMENT APIs

  // L·∫•y danh s√°ch serial available cho product theo status
  async getAvailableSerialsByProduct(productId: number, status: string = 'IN_STOCK'): Promise<AvailableSerialItem[]> {
    console.log('üîç Fetching serials for product:', productId, 'with status:', status);

    // S·ª≠ d·ª•ng API m·ªõi v·ªõi status
    const response = await apiRequest<ApiResponse<ProductSerial[]>>(`/api/product/product-serials/${productId}/serials/status/${status}`);

    if (response.success) {
      // Transform data ƒë·ªÉ match AvailableSerialItem interface
      const availableSerials = response.data.map(serial => ({
        id: serial.id,
        serial: serial.serial,
        productId: serial.productId,
        productName: serial.productName,
        status: 'available' as const
      }));

      console.log('‚úÖ Available serials:', availableSerials);
      return availableSerials;
    }
    throw new Error(response.message || 'Failed to fetch available serials');
  },

  // G√°n serials cho order item
  async assignSerialsToOrder(request: SerialAssignmentRequest): Promise<SerialAssignmentResponse> {
    console.log('üöÄ Calling assignment API:', {
      url: `/api/product/product-serials/serials/assign-to-order-item/${request.orderItemId}`,
      body: request.serialIds
    });

    try {
      const response = await apiRequest<SerialAssignmentResponse>(
        `/api/product/product-serials/serials/assign-to-order-item/${request.orderItemId}`,
        {
          method: 'POST',
          body: JSON.stringify(request.serialIds), // Body l√† array c·ªßa serialIds
        }
      );

      console.log('üì° API Response:', response);
      return response; // Return response tr·ª±c ti·∫øp, kh√¥ng check success ·ªü ƒë√¢y

    } catch (error) {
      console.error('‚ùå API call failed:', error);
      throw error;
    }
  },

  // L·∫•y serials ƒë√£ g√°n cho order
  async getAssignedSerialsByOrder(orderId: number): Promise<ProductSerial[]> {
    const response = await apiRequest<ApiResponse<ProductSerial[]>>(`/api/order/${orderId}/assigned-serials`);

    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to fetch assigned serials');
  },

  // L·∫•y serials ƒë√£ g√°n cho order item c·ª• th·ªÉ
  async getSerialsByOrderItem(orderItemId: number): Promise<ProductSerial[]> {
    const response = await apiRequest<ApiResponse<ProductSerial[]>>(`/api/product/product-serials/order-items/${orderItemId}/serials`);

    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to fetch serials for order item');
  },


  // H·ªßy g√°n serial (tr·∫£ v·ªÅ tr·∫°ng th√°i available)
  async unassignSerial(serialId: number): Promise<void> {
    const response = await apiRequest<ApiResponse<any>>(`/api/product/serial/${serialId}/unassign`, {
      method: 'PATCH',
    });

    if (!response.success) {
      throw new Error(response.message || 'Failed to unassign serial');
    }
  },

  // H·ªßy g√°n nhi·ªÅu serials t·ª´ order item
  async unassignSerialsFromOrderItem(orderItemId: number, serialIds: number[]): Promise<void> {
    console.log('üîÑ Unassigning serials from order item:', {
      orderItemId,
      serialIds,
      count: serialIds.length
    });

    const response = await apiRequest<ApiResponse<any>>(`/api/product/product-serials/serials/unassign-from-order-item/${orderItemId}`, {
      method: 'PATCH',
      body: JSON.stringify(serialIds),
    });

    if (!response.success) {
      throw new Error(response.message || 'Failed to unassign serials from order item');
    }

    console.log('‚úÖ Successfully unassigned serials from order item');
  },

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i serial
  async updateSerialStatus(serialId: number, status: 'available' | 'sold' | 'reserved' | 'damaged' | 'returned'): Promise<void> {
    const response = await apiRequest<ApiResponse<any>>(`/api/product/serial/${serialId}/status`, {
      method: 'PATCH',
      body: JSON.stringify({ status }),
    });

    if (!response.success) {
      throw new Error(response.message || 'Failed to update serial status');
    }
  },

  // L·∫•y l·ªãch s·ª≠ g√°n serial cho m·ªôt serial c·ª• th·ªÉ
  async getSerialHistory(serialId: number): Promise<any[]> {
    const response = await apiRequest<ApiResponse<any[]>>(`/api/product/serial/${serialId}/history`);

    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to fetch serial history');
  },

  // Bulk assign serials to multiple order items
  async bulkAssignSerials(assignments: SerialAssignmentRequest[]): Promise<SerialAssignmentResponse[]> {
    const response = await apiRequest<ApiResponse<SerialAssignmentResponse[]>>('/api/order/bulk-assign-serials', {
      method: 'POST',
      body: JSON.stringify({ assignments }),
    });

    if (response.success) {
      return response.data;
    }
    throw new Error(response.message || 'Failed to bulk assign serials');
  },

  // Ph√¢n b·ªï serial cho ƒë·∫°i l√Ω (chuy·ªÉn t·ª´ ASSIGNED_TO_ORDER_ITEM sang ALLOCATED_TO_DEALER)
  async allocateSerialToDealer(serialIds: number[], dealerId: number): Promise<ApiResponse<any>> {
    console.log('üè¢ Allocating serials to dealer:', {
      serialIds,
      dealerId
    });

    const response = await apiRequest<ApiResponse<any>>(`/api/product/product-serials/serials/allocate-to-dealer/${dealerId}`, {
      method: 'POST',
      body: JSON.stringify(serialIds), // Ch·ªâ g·ª≠i array serialIds
    });

    // Sau khi allocate th√†nh c√¥ng, backend s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t OrderItem status
    // Kh√¥ng c·∫ßn manual update t·ª´ frontend n·ªØa v√¨ logic ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang backend

    return response;
  },

  // L·∫•y danh s√°ch serial ƒë√£ ph√¢n b·ªï cho ƒë·∫°i l√Ω c·ªßa m·ªôt order item
  async getAllocatedSerialsByOrderItem(orderItemId: number): Promise<ProductSerial[]> {
    console.log('üîç Fetching allocated serials for order item:', orderItemId);

    const response = await apiRequest<ApiResponse<ProductSerial[]>>(`/api/product/product-serials/order-items/${orderItemId}/allocated-serials`);

    if (response.success) {
      console.log('‚úÖ Allocated serials:', response.data);
      return response.data;
    }
    throw new Error(response.message || 'Failed to fetch allocated serials');
  },

};